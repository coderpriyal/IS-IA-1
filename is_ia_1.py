# -*- coding: utf-8 -*-
"""is ia 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lUKOe4o5YqH43EBQzdLy03UALKzt25Pc
"""

!pip install cryptography

import os

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

def encrypt_camellia(plaintext, key):
    backend = default_backend()
    iv = os.urandom(16)
    cipher = Cipher(algorithms.Camellia(key), modes.CBC(iv), backend=backend)
    encryptor = cipher.encryptor()

    padder = padding.PKCS7(algorithms.Camellia.block_size).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()

    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()
    return iv + ciphertext

def decrypt_camellia(ciphertext, key):
    backend = default_backend()
    iv = ciphertext[:16]
    ciphertext = ciphertext[16:]
    cipher = Cipher(algorithms.Camellia(key), modes.CBC(iv), backend=backend)
    decryptor = cipher.decryptor()

    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()

    unpadder = padding.PKCS7(algorithms.Camellia.block_size).unpadder()
    unpadded_plaintext = unpadder.update(decrypted_data) + unpadder.finalize()
    return unpadded_plaintext

def main():
    # Generate a random 256-bit key for Camellia
    camellia_key = os.urandom(32)

    # Prompt user to enter the plaintext message
    camellia_plaintext = input("Enter the plaintext message: ").encode()

    # Encryption
    camellia_ciphertext = encrypt_camellia(camellia_plaintext, camellia_key)
    print("Encrypted Message:", camellia_ciphertext)

    # Decryption
    decrypted_text = decrypt_camellia(camellia_ciphertext, camellia_key)
    print("Decrypted Message:", decrypted_text.decode('utf-8'))

if __name__ == "__main__":
    main()